<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="P_Mqtt" Id="{1686682f-4c5e-46af-a8e1-7048f3359bbb}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM P_Mqtt
VAR
  
	sCounter  : STRING(1024);
   
  	// Function blocks for IOT communication 
  	fbMqttClient    : FB_IotMqttClient;
	fbMessageQueue  : FB_IotMqttMessageQueue;
	fbMessage       : FB_IotMqttMessage;	
  
	bSetParameter   : BOOL := TRUE;  // set parametre 
	bHaveNetwork     : BOOL ; 
	
	(* publish message -  *)
	sTopicPub       	: STRING(255);
	sOpStateTopicPub	: STRING(255);
	sPLCStateTopicPub 	: STRING(255);
	sCutStateTopicPub	: STRING(255);
	sPickStateTopicPub	: STRING(255);
	sRecipeTopicPub		: STRING(255);
	sVelocityTopicPub	: STRING(255);
	sProgramTopicPub	: STRING(255);
	sAlarmTopicPub		: STRING(255);
	
	sPayloadPub     : STRING(255);
	
	bSendMsg         : BOOL;
	
	(* subscription *)
	bSubscribed     : BOOL;
	sTopicSub       : STRING(255);
	
	
	
	(* received message *)
	{attribute 'TcEncoding':='UTF-8'}
	sTopicRcv       : STRING(255);
	{attribute 'TcEncoding':='UTF-8'}
	sPayloadRcv     : STRING(255);
	bError           : BOOL;
	// Sent messages 
	udiSentMessages: UDINT;
	bstatus: BOOL;
	
	fbAdapterInfo: FB_GetAdaptersInfo;
	
	udiCounter : UDINT;
	
	tonSendMsg : Tc2_Standard.TON;
	
	tonMomOn : Tc2_Standard.TON;
	
	sTag : STRING;
	
	iFlag : INT;
	
	bCount : BOOL;
	bForceUpdate : BOOL;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[

 
  A_Init();

  // Connect Action 
  A_Connect();
  
  
  // Send Message Action
  A_SendMessage();
  
  // Subscribe Action
  A_Subscribe();
  
  // Get Adapter Info
  A_AdapterInfo();
   
]]></ST>
    </Implementation>
    <Action Name="A_AdapterInfo" Id="{2e27eef3-6e8d-44b5-986d-a64922301f7a}">
      <Implementation>
        <ST><![CDATA[
fbAdapterInfo(
	sNetID:='' , 
	bExecute:= NOT fbAdapterInfo.bExecute AND NOT fbAdapterInfo.bBusy , 
	tTimeout:= , 
	bBusy=> , 
	bError=> , 
	nErrID=> , 
	arrAdapters=> , 
	nCount=> , 
	nGet=> );
	
IF NOT fbAdapterInfo.bBusy THEN
	IF fbAdapterInfo.arrAdapters[0].sIpAddr <> '0.0.0.0' THEN
		bHaveNetwork:=TRUE;
	ELSE
		bHaveNetwork:=FALSE;
	END_IF
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_Connect" Id="{51a4e9f4-3b70-4b8a-8a34-378506db0bbd}">
      <Implementation>
        <ST><![CDATA[
// Execute and update MQTT client

fbMqttClient.Execute(bHaveNetwork);
bError:= fbMqttClient.bError;

]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_Init" Id="{b75ea88d-e2ae-41cc-a314-9cea5668d546}">
      <Implementation>
        <ST><![CDATA[
IF bSetParameter THEN

	fbMqttClient.sHostName:='192.168.29.56';
	fbMqttClient.nHostPort:=1883;
	
	fbMqttClient.nKeepAlive := 60;

	fbMqttClient.ipMessageQueue := fbMessageQueue;
		
	bSetParameter  := FALSE;
	
	sTopicPub 			:= 'mqtt/plc2hmi';
	sOpStateTopicPub	:= 'mqtt/plc2hmi/opState';
	sPLCStateTopicPub	:= 'mqtt/plc2hmi/plcState';
	sCutStateTopicPub	:= 'mqtt/plc2hmi/cutState';
	sPickStateTopicPub	:= 'mqtt/plc2hmi/pickState';
	sRecipeTopicPub		:= 'mqtt/plc2hmi/recipe';
	sVelocityTopicPub 	:= 'mqtt/plc2hmi/velocity';
	sProgramTopicPub 	:= 'mqtt/plc2hmi/program';
	sAlarmTopicPub 		:= 'mqtt/plc2hmi/alarm';
	
	sTopicSub 			:= 'php-mqtt/hmi2plc/#';
	
ELSIF NOT bHaveNetwork THEN
	bHaveNetwork := FALSE;

END_IF
]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_SendMessage" Id="{18bb948d-80b5-4894-8706-11eb4250c15c}">
      <Implementation>
        <ST><![CDATA[// Send MQTT data 
IF fbMqttClient.bConnected AND bHaveNetwork THEN

	IF PROGRAM_DATA.usiRecipe <> PROGRAM_DATA.usiNewRecipe THEN
		///////////////////////////// RECIPE UPDATE //////////////////////////////
		PROGRAM_DATA.usiRecipe := PROGRAM_DATA.usiNewRecipe;
		sPayloadPub := USINT_TO_STRING(PROGRAM_DATA.usiRecipe);
		bstatus := fbMqttClient.Publish(sTopic:= sRecipeTopicPub, pPayload:= ADR(sPayloadPub), nPayloadSize:= LEN2(ADR(sPayloadPub)), eQoS:= TcIotMqttQos.AtMostOnceDelivery, bRetain:= TRUE, bQueue:= TRUE );
		udiSentMessages := udiSentMessages + 1; 
	END_IF

	IF bPLCStatus <> NewbPLCStatus OR bRobotCutStatus <> NewbRobotCutStatus OR bRobotPickStatus <> NewbRobotPickStatus THEN
		bPLCStatus 			:= NewbPLCStatus;
		bRobotCutStatus		:= NewbRobotCutStatus;
		bRobotPickStatus	:= NewbRobotPickStatus;
		
		// Onchange, publish PLC/Cut/Pick State
		sPayloadPub := BOOL_TO_STRING(bPLCStatus);
		bstatus := fbMqttClient.Publish(sTopic:= sPLCStateTopicPub, pPayload:= ADR(sPayloadPub), nPayloadSize:= LEN2(ADR(sPayloadPub)), eQoS:= TcIotMqttQos.AtMostOnceDelivery, bRetain:= TRUE, bQueue:= TRUE );
		udiSentMessages := udiSentMessages + 1; 
		
		sPayloadPub := BOOL_TO_STRING(bRobotCutStatus);
		bstatus := fbMqttClient.Publish(sTopic:= sCutStateTopicPub, pPayload:= ADR(sPayloadPub), nPayloadSize:= LEN2(ADR(sPayloadPub)), eQoS:= TcIotMqttQos.AtMostOnceDelivery, bRetain:= TRUE, bQueue:= TRUE );
		udiSentMessages := udiSentMessages + 1; 
		
		sPayloadPub := BOOL_TO_STRING(bRobotPickStatus);
		bstatus := fbMqttClient.Publish(sTopic:= sPickStateTopicPub, pPayload:= ADR(sPayloadPub), nPayloadSize:= LEN2(ADR(sPayloadPub)), eQoS:= TcIotMqttQos.AtMostOnceDelivery, bRetain:= TRUE, bQueue:= TRUE );
		udiSentMessages := udiSentMessages + 1; 
	END_IF

	////////////////////////////////// MAIN page HMI ////////////////////////////////////
	(*IF PROGRAM_DATA.usiProgram <> PROGRAM_DATA.usiNewProgram THEN*)
	IF PROGRAM_DATA.usiNewProgram <> 0 THEN
		PROGRAM_DATA.usiProgram := PROGRAM_DATA.usiNewProgram;
		
		sPayloadPub := USINT_TO_STRING(PROGRAM_DATA.usiProgram);
		bstatus := fbMqttClient.Publish(sTopic:= sProgramTopicPub, pPayload:= ADR(sPayloadPub), nPayloadSize:= LEN2(ADR(sPayloadPub)), eQoS:= TcIotMqttQos.AtMostOnceDelivery, bRetain:= TRUE, bQueue:= TRUE );
		(*udiSentMessages := udiSentMessages + 1; *)
	END_IF
	
	IF PROGRAM_DATA.usiVelocity <> PROGRAM_DATA.usiNewVelocity THEN
		PROGRAM_DATA.usiVelocity := PROGRAM_DATA.usiNewVelocity;
		
		sPayloadPub := USINT_TO_STRING(PROGRAM_DATA.usiVelocity);
		bstatus := fbMqttClient.Publish(sTopic:= sVelocityTopicPub, pPayload:= ADR(sPayloadPub), nPayloadSize:= LEN2(ADR(sPayloadPub)), eQoS:= TcIotMqttQos.AtMostOnceDelivery, bRetain:= TRUE, bQueue:= TRUE );
		udiSentMessages := udiSentMessages + 1; 
	END_IF
	
	IF bStart AND iFlag <> 1 THEN
		iFlag := 1;
		// When running, publish start
		sPayloadPub := 'start';
		bstatus := fbMqttClient.Publish(sTopic:= sOpStateTopicPub, pPayload:= ADR(sPayloadPub), nPayloadSize:= LEN2(ADR(sPayloadPub)), eQoS:= TcIotMqttQos.AtMostOnceDelivery, bRetain:= TRUE, bQueue:= TRUE );
		udiSentMessages := udiSentMessages + 1; 
	ELSIF ((bStop) OR (gStopped = TRUE)) AND iFlag <> 2 THEN
		iFlag := 2;
		// When stopped, publish stop
		sPayloadPub := 'stop';
		bstatus := fbMqttClient.Publish(sTopic:= sOpStateTopicPub, pPayload:= ADR(sPayloadPub), nPayloadSize:= LEN2(ADR(sPayloadPub)), eQoS:= TcIotMqttQos.AtMostOnceDelivery, bRetain:= TRUE, bQueue:= TRUE );
		udiSentMessages := udiSentMessages + 1; 
	ELSIF (bAlarm OR bAlarmAck) AND iFlag <> 3 THEN
		iFlag := 3;
		sPayloadPub := TO_STRING(robotAlarmId);
		bstatus := fbMqttClient.Publish(sTopic:= sAlarmTopicPub, pPayload:= ADR(sPayloadPub), nPayloadSize:= LEN2(ADR(sPayloadPub)), eQoS:= TcIotMqttQos.AtMostOnceDelivery, bRetain:= TRUE, bQueue:= TRUE );
		udiSentMessages := udiSentMessages + 1; 
	END_IF
	


	IF bSendMsg AND iFlag <> 3 THEN // Send data
		iFlag := 3;
		bSendMsg := FALSE;
		 // Publish method - send payload       
		bstatus := fbMqttClient.Publish(sTopic:= sTopicPub, pPayload:= ADR(sCounter), nPayloadSize:= LEN2(ADR(sCounter)), eQoS:= TcIotMqttQos.AtMostOnceDelivery, bRetain:= FALSE, bQueue:= FALSE );
	  udiSentMessages := udiSentMessages + 1; 
 	END_IF
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_Subscribe" Id="{1e7a3910-e7c6-48d8-891a-5ba5e0519bf6}">
      <Implementation>
        <ST><![CDATA[


// Subscribe (modtage) messages with a connection to AZURE is established
IF fbMqttClient.bConnected THEN
  // Subscribe only if not already subscriped
	IF NOT bSubscribed THEN
    // Call of subscribe Method
		bSubscribed := fbMqttClient.Subscribe(sTopic:=sTopicSub, eQoS:=TcIotMqttQos.AtLeastOnceDelivery);
	END_IF
ELSE
	bSubscribed := FALSE;
END_IF




//Get messages with the use of a queue system
IF fbMessageQueue.nQueuedMessages > 0 THEN
	IF fbMessageQueue.Dequeue(fbMessage:=fbMessage) THEN
		fbMessage.GetTopic(pTopic:=ADR(sTopicRcv), nTopicSize:=SIZEOF(sTopicRcv) );
		fbMessage.GetPayload(pPayload:=ADR(sPayloadRcv), nPayloadSize:=SIZEOF(sPayloadRcv), bSetNullTermination:=TRUE);
		
		sTag := MID(STR:= sTopicRcv, LEN:= Tc2_Standard.LEN(sTopicRcv)-12, POS:= 13);		
		
		IF sTopicRcv = 'php-mqtt/hmi2plc/recipe' THEN
			PROGRAM_DATA.usiNewRecipe := STRING_TO_USINT(sPayloadRcv);
			P_SqlSelectRecipe.bRead := TRUE;
		END_IF
		
		IF sTopicRcv = 'php-mqtt/hmi2plc/program' THEN
			PROGRAM_DATA.usiNewProgram := STRING_TO_USINT(sPayloadRcv);
			//P_SqlSelectRecipe.bRead := TRUE;
		END_IF
		
		IF sTopicRcv = 'php-mqtt/hmi2plc/setup' THEN
			IF (sPayloadRcv = 'rob-con') THEN
				bRobotConnect 		:= TRUE;
			ELSIF (sPayloadRcv = 'rob-discon') THEN 	
				bRobotDisconnect	:= TRUE;
			ELSIF (sPayloadRcv = 'calib-check') THEN 	
				bCalibCheck 		:= TRUE;
			END_IF
		END_IF
		
		IF sTopicRcv = 'php-mqtt/hmi2plc/calib' THEN
			sNewCalib := sPayloadRcv;
		END_IF
		
		IF sTopicRcv = 'php-mqtt/hmi2plc/vision' THEN
			usiVisionCmd := STRING_TO_USINT(sPayloadRcv);
		END_IF
		
		IF sTopicRcv = 'php-mqtt/hmi2plc/tool' THEN
			sToolControl := sPayloadRcv;
		END_IF
		
		IF sTopicRcv = 'php-mqtt/hmi2plc/frameUpdate' THEN
			P_SqlSelectFrame.bRead := TRUE;
		END_IF
		
		IF sTopicRcv = 'php-mqtt/hmi2plc/frameUpdate' THEN
			P_SqlSelectFrame.bRead := TRUE;
		END_IF
		
		IF sTopicRcv = 'php-mqtt/hmi2plc/alarm' THEN
			IF (sPayloadRcv = 'Acknowledge') THEN
				bAlarm := FALSE;
			END_IF
		END_IF
		
		IF sTopicRcv = 'php-mqtt/hmi2plc/opState' THEN
			IF (sPayloadRcv = 'start') THEN
				bStart	:= TRUE;
				bStop 	:= FALSE;
			ELSIF (sPayloadRcv = 'pause') THEN
				bStop 	:= TRUE;
				bStart	:= FALSE;
			ELSIF (sPayloadRcv = 'stop') THEN
				bStop := TRUE;
				bStart	:= FALSE;
			END_IF
		END_IF
		
		IF	sPayloadRcv = '1' THEN
			IF sTopicRcv = 'php-mqtt/hmi2plc/resetWith' THEN
				bResetButton := TRUE;
			ELSIF sTopicRcv = 'php-mqtt/hmi2plc/resetWithout' THEN
				bResetButton2 := TRUE;
			ELSIF sTopicRcv = 'php-mqtt/hmi2plc/serviceStart' THEN
				bRobotServiceStart := TRUE;
			ELSIF sTopicRcv = 'php-mqtt/hmi2plc/serviceStop' THEN
				bRobotServiceStop := TRUE;
			ELSIF sTopicRcv = 'php-mqtt/hmi2plc/idle' THEN
				bBackToZero := TRUE;
			END_IF
		END_IF
			
		IF sPayloadRcv = '0' THEN
			IF sTopicRcv = 'php-mqtt/hmi2plc/resetWith' THEN
				bResetButton := FALSE;
			ELSIF sTopicRcv = 'php-mqtt/hmi2plc/resetWithout' THEN
				bResetButton2 := FALSE;
			ELSIF sTopicRcv = 'php-mqtt/hmi2plc/serviceStart' THEN
				bRobotServiceStart := FALSE;
			ELSIF sTopicRcv = 'php-mqtt/hmi2plc/serviceStop' THEN
				bRobotServiceStop := FALSE;
			ELSIF sTopicRcv = 'php-mqtt/hmi2plc/idle' THEN
				bBackToZero := FALSE;
			END_IF
			
		END_IF
			
		
		
		IF sTag = 'reset' THEN
			udiCounter := 0;
			bForceUpdate := TRUE;
		ELSIF sTag = 'start' THEN	
			bCount := TO_BOOL(sPayloadRcv);
		END_IF
		
	END_IF
END_IF

tonMomOn(PT:= T#100MS, Q=> , ET=> );]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="P_Mqtt">
      <LineId Id="3" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="5" Count="5" />
      <LineId Id="13" Count="9" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="P_Mqtt.A_AdapterInfo">
      <LineId Id="3" Count="11" />
      <LineId Id="18" Count="0" />
      <LineId Id="15" Count="1" />
      <LineId Id="19" Count="1" />
      <LineId Id="1" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="P_Mqtt.A_Connect">
      <LineId Id="2" Count="5" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="P_Mqtt.A_Init">
      <LineId Id="21" Count="1" />
      <LineId Id="40" Count="1" />
      <LineId Id="31" Count="0" />
      <LineId Id="42" Count="1" />
      <LineId Id="33" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="47" Count="1" />
      <LineId Id="50" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="68" Count="4" />
      <LineId Id="67" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="P_Mqtt.A_SendMessage">
      <LineId Id="3" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="111" Count="1" />
      <LineId Id="118" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="115" Count="1" />
      <LineId Id="114" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="107" Count="1" />
      <LineId Id="110" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="78" Count="2" />
      <LineId Id="76" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="101" Count="1" />
      <LineId Id="100" Count="0" />
      <LineId Id="103" Count="0" />
      <LineId Id="105" Count="1" />
      <LineId Id="104" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="121" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="140" Count="0" />
      <LineId Id="124" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="130" Count="1" />
      <LineId Id="129" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="134" Count="5" />
      <LineId Id="133" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="53" Count="1" />
      <LineId Id="49" Count="0" />
      <LineId Id="141" Count="4" />
      <LineId Id="47" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="10" Count="3" />
      <LineId Id="15" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="P_Mqtt.A_Subscribe">
      <LineId Id="23" Count="1" />
      <LineId Id="2" Count="7" />
      <LineId Id="17" Count="1" />
      <LineId Id="1" Count="0" />
      <LineId Id="20" Count="2" />
      <LineId Id="19" Count="0" />
      <LineId Id="11" Count="4" />
      <LineId Id="26" Count="1" />
      <LineId Id="56" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="175" Count="0" />
      <LineId Id="177" Count="0" />
      <LineId Id="176" Count="0" />
      <LineId Id="252" Count="0" />
      <LineId Id="254" Count="2" />
      <LineId Id="253" Count="0" />
      <LineId Id="214" Count="0" />
      <LineId Id="216" Count="0" />
      <LineId Id="219" Count="0" />
      <LineId Id="218" Count="0" />
      <LineId Id="222" Count="3" />
      <LineId Id="221" Count="0" />
      <LineId Id="215" Count="0" />
      <LineId Id="226" Count="0" />
      <LineId Id="228" Count="0" />
      <LineId Id="235" Count="0" />
      <LineId Id="227" Count="0" />
      <LineId Id="236" Count="0" />
      <LineId Id="238" Count="1" />
      <LineId Id="237" Count="0" />
      <LineId Id="248" Count="0" />
      <LineId Id="250" Count="1" />
      <LineId Id="249" Count="0" />
      <LineId Id="189" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="195" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="242" Count="0" />
      <LineId Id="244" Count="1" />
      <LineId Id="243" Count="0" />
      <LineId Id="257" Count="0" />
      <LineId Id="259" Count="3" />
      <LineId Id="258" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="49" Count="1" />
      <LineId Id="54" Count="0" />
      <LineId Id="66" Count="1" />
      <LineId Id="160" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="104" Count="1" />
      <LineId Id="111" Count="0" />
      <LineId Id="164" Count="1" />
      <LineId Id="117" Count="0" />
      <LineId Id="171" Count="1" />
      <LineId Id="125" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="161" Count="2" />
      <LineId Id="201" Count="12" />
      <LineId Id="103" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="30" Count="1" />
      <LineId Id="35" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="247" Count="0" />
      <LineId Id="88" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>